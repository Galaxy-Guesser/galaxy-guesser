# Ignore the Visual Studio temporary files, build results, and files generated by popular Visual Studio add-ons.
.vs/
.vscode/
.idea/

# User-specific files
*.user
*.userosscache
*.suo
*.userprefs
#launchSettings.json
*.sln
*.http
# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Dd]Release/
[Dd]ebug/32/
[Dd]ebug/64/
[Dd]Release/32/
[Dd]Release/64/
x64/
x86/
ARM/
arm64/
bin/
obj/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows Installer Package Files
*.vssscc
*.vspscc

# User-specific files for JetBrains Rider
.idea/

# ASP.NET Scaffolding
Scaffolding/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# .NET Framework
packages/
*.dll
*.exe
*.pdb
*.cache
*.class
*.jar
*.log

# .NET Core & ASP.NET Core
.vscode/
# User-specific files
*.suo
*.user
*.userosscache
*.suo

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
.terraform.lock*
